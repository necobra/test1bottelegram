import random

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from aiogram import Bot, Dispatcher, executor, types
from random import randint
from aiogram.dispatcher.filters import Text

from db import BotDB

bot = Bot(token='5502925067:AAGHrx-77qnydu_xcb9XE8vMaCVEpu4KKQA', parse_mode='html')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

db = BotDB('database.db')


class Form(StatesGroup):
    subject_id = State()
    history = State()
    math = State()
    eng = State()
    topics = State()
    topic = State()
    new_topic = State()
    change = State()
    change_own = State()
    add_q = State()
    cin_new_q = State()
    edit_q = State()
    edit_q_q = State()
    edit_q_ans = State()


@dp.message_handler(commands=['test'], state="*")
async def test(message: types.Message, state: FSMContext):
    print(await state.get_state())


@dp.message_handler(Text(startswith='–í–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –ø—Ä–µ–¥–º–µ—Ç'), state="*")
@dp.message_handler(commands=['start'], state="*")
@dp.message_handler(commands=['start'], state=None)
async def start(message: types.Message, state: FSMContext):
    await state.finish()

    rmk = types.reply_keyboard.ReplyKeyboardMarkup(resize_keyboard=True)
    b1 = types.reply_keyboard.KeyboardButton('–Ü—Å—Ç–æ—Ä—ñ—è –ó–ù–û')
    b2 = types.reply_keyboard.KeyboardButton('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞')
    b3 = types.reply_keyboard.KeyboardButton('–ê–Ω–≥–ª(—Ç–µ—Å—Ç)')
    rmk.row(b1, b2, b3)
    msg = "–í–∏–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç"
    await bot.send_message(message.chat.id, msg, reply_markup=rmk)


@dp.message_handler(Text(startswith='–Ü—Å—Ç–æ—Ä—ñ—è –ó–ù–û'), state=Form.history)
@dp.message_handler(Text(startswith='–Ü—Å—Ç–æ—Ä—ñ—è –ó–ù–û'), state=None)
async def history(message: types.Message, state: FSMContext):
    await Form.history.set()
    async with state.proxy() as qdata:
        qdata['subject_id'] = 1

    rmk = types.reply_keyboard.ReplyKeyboardMarkup(resize_keyboard=True)
    b0 = types.reply_keyboard.KeyboardButton('–í–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –ø—Ä–µ–¥–º–µ—Ç')
    b1 = types.reply_keyboard.KeyboardButton('–¢–µ–º–∞')
    b2 = types.reply_keyboard.KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è')

    rmk.row(b1, b2, b0)
    msg = "–ú–µ–Ω—é —ñ—Å—Ç–æ—Ä—ñ—ó"
    await bot.send_message(message.chat.id, msg, reply_markup=rmk)


@dp.message_handler(Text(startswith='–í–∏–±—Ä–∞—Ç–∏ —ñ–Ω—à–∏–π –ø—Ä–µ–¥–º–µ—Ç'), state="*")
async def func(message: types.Message, state: FSMContext):
    await start(message, state)


@dp.message_handler(Text(startswith='–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è'), state=Form.history)
async def func(message: types.Message, state: FSMContext):
    await Form.change.set()
    rmk = types.reply_keyboard.ReplyKeyboardMarkup(resize_keyboard=True)
    b0 = types.reply_keyboard.KeyboardButton('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥')
    b1 = types.reply_keyboard.KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ —Ç–µ–º')
    b2 = types.reply_keyboard.KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤–∏ —Ç–µ–º')

    rmk.row(b1, b2, b0)
    msg = "–ü–∞–º'—è—Ç–∞–π, –≤ —Ç–µ–±–µ –∑–∞–≤–∂–¥–∏ —î –≤–∏–±—ñ—Ä(–Ω–∞–ø–µ–≤–Ω–æ)"
    await bot.send_message(message.chat.id, msg, reply_markup=rmk)


@dp.message_handler(Text(startswith='–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥'), state=Form.change)
async def func(message: types.Message, state: FSMContext):
    await history(message, state)


@dp.message_handler(Text(startswith='–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ —Ç–µ–º'), state=Form.change)
async def func(message: types.Message, state: FSMContext):
    async with state.proxy() as qdata:
        subject_id = qdata['subject_id']
    topics_list = db.get_topics(subject_id)
    topics_list.sort(key=lambda x: x[3])
    # print(topics_list)
    for topic in topics_list:
        msg = f'{topic[1]}\n{topic[3]}'
        rmk = types.inline_keyboard.InlineKeyboardMarkup()
        b1 = types.inline_keyboard.InlineKeyboardButton(text="+1", callback_data=f'change_priot?{topic[0]}?+1')
        b2 = types.inline_keyboard.InlineKeyboardButton(text="-1", callback_data=f'change_priot?{topic[0]}?-1')
        b3 = types.inline_keyboard.InlineKeyboardButton(text="–ü–æ–º—ñ–Ω—è—Ç–∏ –Ω–∞ –æ–±—Ä–∞–Ω–µ —á–∏—Å–ª–æ",
                                                        callback_data=f'change_priot?{topic[0]}?=')
        rmk.row(b1, b2, b3)
        await bot.send_message(message.from_user.id, msg, reply_markup=rmk)


@dp.callback_query_handler(Text(startswith='change_priot'), state=Form.change)
async def func(callback: types.callback_query, state: FSMContext):
    data = callback.data.split('?')
    topic_id = int(data[1])
    act = data[2]
    # get priot
    priot = int(callback.message.text.split('\n')[1])
    # print(priot)
    if act == '+1':
        db.update_topic_priot(topic_id, priot + 1)
        text = callback.message.text.split('\n')[0] + f"\n{priot + 1}"

        rmk = types.inline_keyboard.InlineKeyboardMarkup()
        b1 = types.inline_keyboard.InlineKeyboardButton(text="+1", callback_data=f'change_priot?{topic_id}?+1')
        b2 = types.inline_keyboard.InlineKeyboardButton(text="-1", callback_data=f'change_priot?{topic_id}?-1')
        b3 = types.inline_keyboard.InlineKeyboardButton(text="–ü–æ–º—ñ–Ω—è—Ç–∏ –Ω–∞ –æ–±—Ä–∞–Ω–µ —á–∏—Å–ª–æ",
                                                        callback_data=f'change_priot?{topic_id}?=')
        rmk.row(b1, b2, b3)
        await callback.message.edit_text(text, reply_markup=rmk)
    elif act == '-1':
        db.update_topic_priot(topic_id, priot - 1)
        text = callback.message.text.split('\n')[0] + f"\n{priot - 1}"

        rmk = types.inline_keyboard.InlineKeyboardMarkup()
        b1 = types.inline_keyboard.InlineKeyboardButton(text="+1", callback_data=f'change_priot?{topic_id}?+1')
        b2 = types.inline_keyboard.InlineKeyboardButton(text="-1", callback_data=f'change_priot?{topic_id}?-1')
        b3 = types.inline_keyboard.InlineKeyboardButton(text="–ü–æ–º—ñ–Ω—è—Ç–∏ –Ω–∞ –æ–±—Ä–∞–Ω–µ —á–∏—Å–ª–æ",
                                                        callback_data=f'change_priot?{topic_id}?=')
        rmk.row(b1, b2, b3)
        await callback.message.edit_text(text, reply_markup=rmk)
    else:
        async with state.proxy() as qdata:
            qdata['topic_id'] = topic_id
            qdata['message'] = callback.message

        await Form.change_own.set()
        rmk = types.reply_keyboard.ReplyKeyboardMarkup(resize_keyboard=True)
        b = types.reply_keyboard.KeyboardButton('–í—ñ–¥–º—ñ–Ω–∞')
        rmk.add(b)
        msg = "–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ:"
        # print(callback.message)
        await bot.send_message(callback.message.chat.id, msg, reply_markup=rmk)


@dp.message_handler(Text(startswith='–í—ñ–¥–º—ñ–Ω–∞'), state=Form.change_own)
async def func(message: types.Message, state: FSMContext):
    await Form.change.set()
    rmk = types.reply_keyboard.ReplyKeyboardMarkup(resize_keyboard=True)
    b0 = types.reply_keyboard.KeyboardButton('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥')
    b1 = types.reply_keyboard.KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ —Ç–µ–º')
    b2 = types.reply_keyboard.KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤–∏ —Ç–µ–º')

    rmk.row(b1, b2, b0)
    msg = "–û–∫"
    await bot.send_message(message.chat.id, msg, reply_markup=rmk)


@dp.message_handler(state=Form.change_own)
async def func(message: types.Message, state: FSMContext):
    try:
        num = int(message.text)
        async with state.proxy() as qdata:
            topic_id = qdata['topic_id']
            qmessage = qdata['message']
        db.update_topic_priot(topic_id, num)
        msg = "üëå"
        text = qmessage.text.split('\n')[0] + f"\n{num}"

        rmk = types.inline_keyboard.InlineKeyboardMarkup()
        b1 = types.inline_keyboard.InlineKeyboardButton(text="+1", callback_data=f'change_priot?{topic_id}?+1')
        b2 = types.inline_keyboard.InlineKeyboardButton(text="-1", callback_data=f'change_priot?{topic_id}?-1')
        b3 = types.inline_keyboard.InlineKeyboardButton(text="–ü–æ–º—ñ–Ω—è—Ç–∏ –Ω–∞ –æ–±—Ä–∞–Ω–µ —á–∏—Å–ª–æ",
                                                        callback_data=f'change_priot?{topic_id}?=')
        rmk.row(b1, b2, b3)
        await qmessage.edit_text(text, reply_markup=rmk)
    except:
        msg = "–£–ø—Å"
    await Form.change.set()
    rmk = types.reply_keyboard.ReplyKeyboardMarkup(resize_keyboard=True)
    b0 = types.reply_keyboard.KeyboardButton('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥')
    b1 = types.reply_keyboard.KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–∏ —Ç–µ–º')
    b2 = types.reply_keyboard.KeyboardButton('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤–∏ —Ç–µ–º')
    rmk.row(b1, b2, b0)
    await bot.send_message(message.chat.id, msg, reply_markup=rmk)


@dp.message_handler(Text(startswith='–¢–µ–º–∞'), state=Form.history)
async def topics(message: types.Message, state: FSMContext):
    await Form.topics.set()
    async with state.proxy() as qdata:
        subject_id = qdata['subject_id']

    rmk = types.reply_keyboard.ReplyKeyboardMarkup(resize_keyboard=True)
    b1 = types.reply_keyboard.KeyboardButton("–î–æ–±–∞–≤–∏—Ç–∏ –Ω–æ–≤—É —Ç–µ–º—É")
    b2 = types.reply_keyboard.KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥")
    rmk.row(b1, b2)

    topics_list = db.get_topics(subject_id)
    # print(topics_list)
    topics_list.sort(key=lambda x: x[3])
    for topic in topics_list:
        b = types.reply_keyboard.KeyboardButton(topic[1])
        rmk.add(b)
    msg = "–û–±–µ—Ä—ñ—Ç—å —Ç–µ–º—É"
    await bot.send_message(message.chat.id, msg, reply_markup=rmk)


@dp.message_handler(Text(startswith='–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –Ω–∞–∑–∞–¥'), state=Form.topics)
async def func(message: types.Message, state: FSMContext):
    await history(message, state)


@dp.message_handler(Text(startswith='–î–æ–±–∞–≤–∏—Ç–∏ –Ω–æ–≤—É —Ç–µ–º—É'), state=Form.topics)
async def func(message: types.Message, state: FSMContext):
    await Form.new_topic.set()
    msg = "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ç–µ–º–∏, —Ç–∞–∫–æ–∂, –ø—Ä–∏ –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—Å—Ç—ñ, –≤–≤–µ–¥—ñ—Ç—å —á–µ—Ä–µ–∑ –∞–±–∑–∞—Ü –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç –ø–æ–∫–∞–∑—É(–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–æ–±–∞–≤–ª" \
          "—è—î—Ç—å—Å—è –≤ —Å–∞–º–∏–π –∫—ñ–Ω–µ—Ü—å)\n–©–æ–± —Å–∫–∞—Å—É–≤–∞—Ç–∏ –æ–ø–µ—Ä–∞—Ü—ñ—é –Ω–∞–ø–∏—à—ñ—Ç—å Cancel –∞–±–æ –í—ñ–¥–º—ñ–Ω–∞(–∑ –≤–µ–ª–∏–∫–æ—ó)"
    rmk = types.reply_keyboard.ReplyKeyboardMarkup(resize_keyboard=True)
    b1 = types.reply_keyboard.KeyboardButton("–í—ñ–¥–º—ñ–Ω–∞")
    rmk.add(b1)
    await bot.send_message(message.chat.id, msg, reply_markup=rmk)


@dp.message_handler(Text(startswith='–í—ñ–¥–º—ñ–Ω–∞'), state=Form.new_topic)
@dp.message_handler(Text(startswith='–î–æ—Å–∏—Ç—å'), state=Form.new_topic)
@dp.message_handler(Text(startswith='Cancel'), state=Form.new_topic)
async def func(message: types.Message, state: FSMContext):
    await topics(message, state)


@dp.message_handler(Text(startswith="–î–æ–±–∞–≤–∏—Ç–∏ —â–µ –æ–¥–Ω—É"), state=Form.new_topic)
@dp.message_handler(Text(startswith="–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑"), state=Form.new_topic)
async def func(message: types.Message, state: FSMContext):
    pass


@dp.message_handler(state=Form.new_topic)
async def func(message: types.Message, state: FSMContext):
    async with state.proxy() as qdata:
        subject_id = qdata['subject_id']

    text = message.text.split("\n")
    topic_name = text[0]
    try:
        topic_priot = text[1]
    except:
        topics_list = db.get_topics(subject_id)
        topic_priot = max(topics_list, key=lambda x: x[3])[3]+1

    try:
        topic_priot = int(topic_priot)
        db.add_topic(topic_name, subject_id, topic_priot)
        msgs = ['–ù–µ–π–º–æ–≤—ñ—Ä–Ω–∏–π —É—Å–ø—ñ—Ö', '–í–¥–∞–ª–∞ —Å–ø—Ä–æ–±–∞!', '–ù–µ–æ—á—ñ–∫—É–≤–∞–Ω–æ –≤—Å–µ –ø—Ä–∞—Ü—é—î']
        rmk = types.reply_keyboard.ReplyKeyboardMarkup(resize_keyboard=True)
        b1 = types.reply_keyboard.KeyboardButton("–î–æ–±–∞–≤–∏—Ç–∏ —â–µ –æ–¥–Ω—É")
        b2 = types.reply_keyboard.KeyboardButton("–î–æ—Å–∏—Ç—å")
        rmk.add(b1, b2)
        await bot.send_message(message.chat.id, msgs[randint(0, len(msgs)-1)], reply_markup=rmk)
    except:
        msg = "–°–µ—Ä–≤–µ—Ä –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î. –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–π–Ω—è–≤ —ñ—Å–ª–∞–º\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –∑—Ä–æ–±–∏–ª–∏ –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
        rmk = types.reply_keyboard.ReplyKeyboardMarkup(resize_keyboard=True)
        b1 = types.reply_keyboard.KeyboardButton("–°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑")
        b2 = types.reply_keyboard.KeyboardButton("–í—ñ–¥–º—ñ–Ω–∞")
        rmk.add(b1, b2)
        await bot.send_message(message.chat.id, msg, reply_markup=rmk)


async def print_topic(topic_id, chat_id, state: FSMContext):
    await Form.topic.set()
    pers = db.get_pers(topic_id)
    photos = db.get_photos(topic_id)
    dates = db.get_dates(topic_id)
    async with state.proxy() as qdata:
        qdata['pers'] = pers
        qdata['photos'] = photos
        qdata['dates'] = dates
    # print(photos)
    k1 = len(pers)
    k2 = len(photos)
    k3 = len(dates)

    rmk = types.reply_keyboard.ReplyKeyboardMarkup(resize_keyboard=True)
    msg = ""
    if k1 + k2 + k3 == 0:
        msg += "–í –¥–∞–Ω—ñ–π —Ç–µ–º—ñ –ø–∏—Ç–∞–Ω—å –Ω–µ–º–∞—î\n"
    else:
        b = types.reply_keyboard.KeyboardButton("–í–∏–ø–∞–¥–∫–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è")
        rmk.add(b)
    if k1 > 0:
        b = types.reply_keyboard.KeyboardButton("–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ—ó")
        rmk.add(b)
        msg += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞–º: {k1}\n"
    if k2 > 0:
        b = types.reply_keyboard.KeyboardButton("–í—ñ–∑—É–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è")
        rmk.add(b)
        msg += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–∑—É–∞–ª—å–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å: {k2}\n"
    if k3 > 0:
        b = types.reply_keyboard.KeyboardButton("–î–∞—Ç–∏")
        rmk.add(b)
        msg += f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å –ø–æ –¥–∞—Ç–∞—Ö: {k3}\n"
    msg += "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é"
    b1 = types.reply_keyboard.KeyboardButton("–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–ø–∏—Å–∫—É —Ç–µ–º")
    b2 = types.reply_keyboard.KeyboardButton("–î–æ–±–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")
    b3 = types.reply_keyboard.KeyboardButton("–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è")
    rmk.row(b1, b2, b3)
    await bot.send_message(chat_id, msg, reply_markup=rmk)


@dp.message_handler(state=Form.topics)
async def func(message: types.Message, state: FSMContext):
    async with state.proxy() as qdata:
        subject_id = qdata['subject_id']

    topic = message.text
    # print(topic)
    topic_id = db.get_topic(topic, subject_id)[0][0]
    # print(topic_id)
    async with state.proxy() as qdata:
        qdata['topic_id'] = topic_id
    await print_topic(topic_id, message.chat.id, state)


@dp.message_handler(Text(startswith='–í–∏–ø–∞–¥–∫–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è'), state=Form.topic)
async def func(message: types.Message, state: FSMContext):
    async with state.proxy() as qdata:
        questions = qdata['pers'] + qdata['photos'] + qdata['dates']
    random1 = randint(0, len(questions)-1)

    question = questions[random1]

    rmk = types.inline_keyboard.InlineKeyboardMarkup()
    b1 = types.inline_keyboard.InlineKeyboardButton(text="–í—ñ–¥–ø–æ–≤—ñ–¥—å", callback_data=f'ansr_{random1}')
    rmk.add(b1)
    msg = f"{question[2]}"
    await bot.send_message(message.chat.id, msg, reply_markup=rmk)


@dp.callback_query_handler(Text(startswith='ansr'), state="*")
async def func(callback: types.callback_query, state: FSMContext):
    data = callback.data.split('_')
    index = int(data[1])
    async with state.proxy() as qdata:
        questions = qdata['pers'] + qdata['photos'] + qdata['dates']
    ans = questions[index][1]
    text = f'{callback.message.text}\n\n<b>{ans}</b>'
    await callback.message.edit_text(text)
    await callback.answer()


@dp.message_handler(Text(startswith='–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ—ó'), state=Form.topic)
async def func(message: types.Message, state: FSMContext):
    await set_q('pers', state, message)


@dp.message_handler(Text(startswith='–í—ñ–∑—É–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è'), state=Form.topic)
async def func(message: types.Message, state: FSMContext):
    await set_q('photos', state, message)


@dp.message_handler(Text(startswith='–î–∞—Ç–∏'), state=Form.topic)
async def func(message: types.Message, state: FSMContext):
    await set_q('dates', state, message)


async def set_q(q_type, state: FSMContext, message):
    async with state.proxy() as qdata:
        questions = qdata[q_type]

    random.shuffle(questions)

    for q in questions:
        rmk = types.inline_keyboard.InlineKeyboardMarkup()
        b1 = types.inline_keyboard.InlineKeyboardButton(text="–í—ñ–¥–ø–æ–≤—ñ–¥—å", callback_data=f'ans_{q_type}_{q[0]}')
        rmk.add(b1)
        msg = f"{q[2]}"
        await bot.send_message(message.chat.id, msg, reply_markup=rmk)


@dp.callback_query_handler(Text(startswith='ans'), state="*")
async def func(callback: types.callback_query, state: FSMContext):
    data = callback.data.split('_')
    q_type = data[1]
    q_id = int(data[2])

    ans = db.get_answer(q_type, q_id)[0][1]

    text = f'{callback.message.text}\n\n<b>{ans}</b>'

    await callback.message.edit_text(text)
    await callback.answer()


@dp.message_handler(Text(startswith='–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –¥–æ —Å–ø–∏—Å–∫—É —Ç–µ–º'), state=Form.topic)
async def func(message: types.Message, state: FSMContext):
    await topics(message, state)


@dp.message_handler(Text(startswith='–î–æ–±–∞–≤–∏—Ç–∏ –Ω–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è'), state=Form.topic)
async def func(message: types.Message, state: FSMContext):
    await Form.add_q.set()
    rmk = types.reply_keyboard.ReplyKeyboardMarkup(resize_keyboard=True)
    b1 = types.reply_keyboard.KeyboardButton("–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ—ó")
    b2 = types.reply_keyboard.KeyboardButton("–í—ñ–∑—É–∞–ª—å–Ω–µ")
    b3 = types.reply_keyboard.KeyboardButton("–î–∞—Ç–∞")
    b4 = types.reply_keyboard.KeyboardButton("–í–µ—Ä–Ω—ñ—Ç—å –º–µ–Ω–µ!")
    rmk.row(b1, b2, b3, b4)
    msg = "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –ø–∏—Ç–∞–Ω–Ω—è"
    await bot.send_message(message.chat.id, msg, reply_markup=rmk)


@dp.message_handler(Text(startswith='–í–µ—Ä–Ω—ñ—Ç—å –º–µ–Ω–µ!'), state=Form.add_q)
@dp.message_handler(Text(startswith='–í–µ—Ä–Ω—ñ—Ç—å –º–µ–Ω–µ!'), state=Form.edit_q)
async def func(message: types.Message, state: FSMContext):
    async with state.proxy() as qdata:
        topic_id = qdata['topic_id']
    await print_topic(topic_id, message.chat.id, state)


async def important(message: types.Message, state: FSMContext):
    await Form.cin_new_q.set()
    rmk = types.reply_keyboard.ReplyKeyboardMarkup(resize_keyboard=True)
    b = types.reply_keyboard.KeyboardButton("–í—ñ–¥–±—ñ–π")
    rmk.add(b)
    msg = "–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —ñ —á–µ—Ä–µ–∑ –∞–±–∑–∞—Ü –≤—ñ–¥–ø–æ–≤—ñ–¥—å"
    await bot.send_message(message.chat.id, msg, reply_markup=rmk)


@dp.message_handler(state=Form.add_q)
async def func(message: types.Message, state: FSMContext):
    if message.text.startswith("–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ—ó"):
        t = 'pers'
    elif message.text.startswith("–í—ñ–∑—É–∞–ª—å–Ω–µ"):
        t = 'photos'
    elif message.text.startswith("–î–∞—Ç–∞"):
        t = 'dates'
    else:
        t = 'da blia'
    async with state.proxy() as qdata:
        qdata['type'] = t
    await important(message, state)


@dp.message_handler(Text(startswith='–í—ñ–¥–±—ñ–π'), state=Form.cin_new_q)
async def func(message: types.Message, state: FSMContext):
    async with state.proxy() as qdata:
        topic_id = qdata['topic_id']
    await print_topic(topic_id, message.chat.id, state)


@dp.message_handler(state=Form.cin_new_q)
async def func(message: types.Message, state: FSMContext):
    async with state.proxy() as qdata:
        t = qdata['type']
        topic_id = qdata['topic_id']
    data = message.text.split('\n')
    q = data[0]
    ans = data[1]
    rmk = types.reply_keyboard.ReplyKeyboardMarkup(resize_keyboard=True)
    b = types.reply_keyboard.KeyboardButton("–í—ñ–¥–±—ñ–π")
    rmk.add(b)

    try:
        if t == 'pers':
            db.add_pers(ans, q, topic_id)
        elif t == 'photos':
            db.add_photo(ans, q, topic_id)
        elif t == 'dates':
            db.add_date(q, ans, topic_id)
        msgs = ['–Ø–∫ –∂–µ —Ç–∏ —Ö–∞—Ä–æ—à', '–Ø–∫ —Ç–∏ —Ü–µ —Ä–æ–±–∏—à?', '11/10', '–ß–æ–º—É—Å—å –≤—Å–µ –ø—Ä–∞—Ü—é—î..']
    except:
        msgs = ['–°–µ—Ä–≤–µ—Ä –¥–µ–¥ —ñ–Ω—Å–∞–π–¥', '–¢—Ä–∞–ø–∏–ª–∞—Å—å —Ö–∞–ª–µ–ø–∞', '–Ø —Ç–µ–±–µ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –ø–æ–∫–∏–Ω—É... –ê –Ω—ñ, –ø–æ–∫–∏–Ω—É(–Ω–µ–≤–¥–∞–ª–∞ —Å–ø—Ä–æ–±–∞)']
    r1 = randint(0, len(msgs))
    await bot.send_message(message.chat.id, msgs[r1], reply_markup=rmk)


@dp.message_handler(Text(startswith='–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è'), state=Form.topic)
async def func(message: types.Message, state: FSMContext):
    await Form.edit_q.set()
    rmk = types.reply_keyboard.ReplyKeyboardMarkup(resize_keyboard=True)
    b1 = types.reply_keyboard.KeyboardButton("–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ—ó")
    b2 = types.reply_keyboard.KeyboardButton("–í—ñ–∑—É–∞–ª—å–Ω–µ")
    b3 = types.reply_keyboard.KeyboardButton("–î–∞—Ç–∞")
    b4 = types.reply_keyboard.KeyboardButton("–í–µ—Ä–Ω—ñ—Ç—å –º–µ–Ω–µ!")
    rmk.row(b1, b2, b3, b4)
    msg = "–í–∏–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞–ø–∏—Ç–∞–Ω—å"
    await bot.send_message(message.chat.id, msg, reply_markup=rmk)


@dp.message_handler(state=Form.edit_q)
async def func(message: types.Message, state: FSMContext):
    if message.text.startswith("–ü–µ—Ä—Å–æ–Ω–∞–ª—ñ—ó"):
        t = 'pers'
    elif message.text.startswith("–í—ñ–∑—É–∞–ª—å–Ω–µ"):
        t = 'photos'
    elif message.text.startswith("–î–∞—Ç–∞"):
        t = 'dates'
    else:
        t = 'da blia'

    async with state.proxy() as qdata:
        questions = qdata[t]

    for q in questions:
        rmk = types.inline_keyboard.InlineKeyboardMarkup()
        b1 = types.inline_keyboard.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç—É–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'edit_q_{t}_{q[0]}')
        b2 = types.inline_keyboard.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å",
                                                        callback_data=f'edit_ans_{t}_{q[0]}')
        b3 = types.inline_keyboard.InlineKeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f'edit_del_{t}_{q[0]}')
        rmk.row(b1, b2, b3)
        msg = f"{q[2]}\n\n{q[1]}"
        await bot.send_message(message.chat.id, msg, reply_markup=rmk)


@dp.callback_query_handler(Text(startswith='edit'), state=Form.edit_q)
async def func(callback: types.callback_query, state: FSMContext):
    data = callback.data.split('_')
    action = data[1]
    t = data[2]
    q_id = int(data[3])
    async with state.proxy() as qdata:
        qdata['t'] = t
        qdata['q_id'] = q_id
        qdata['m'] = callback.message

    if action == 'q':
        msg = "–í–ø–∏—à—ñ—Ç—å –Ω–æ–≤–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è:"
        await Form.edit_q_q.set()
    elif action == 'ans':
        msg = "–í–ø–∏—à—ñ—Ç—å –Ω–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å:"
        await Form.edit_q_ans.set()
    else:
        msg = "–û–∫"
        db.update_q_topic(t, q_id, -1)
        await bot.delete_message(callback.message.chat.id, callback.message.message_id)

    await bot.send_message(callback.message.chat.id, msg)
    await callback.answer()


@dp.message_handler(state=Form.edit_q_q)
async def func(message: types.Message, state: FSMContext):
    await Form.edit_q.set()
    async with state.proxy() as qdata:
        t = qdata['t']
        q_id = qdata['q_id']
        m = qdata['m']
    db.update_q_q(t, q_id, message.text)

    rmk = types.inline_keyboard.InlineKeyboardMarkup()
    b1 = types.inline_keyboard.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç—É–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'edit_q_{t}_{q_id}')
    b2 = types.inline_keyboard.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å",
                                                    callback_data=f'edit_ans_{t}_{q_id}')
    b3 = types.inline_keyboard.InlineKeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f'edit_del_{t}_{q_id}')
    rmk.row(b1, b2, b3)
    await m.edit_text(message.text, reply_markup=rmk)


@dp.message_handler(state=Form.edit_q_ans)
async def func(message: types.Message, state: FSMContext):
    await Form.edit_q.set()
    async with state.proxy() as qdata:
        t = qdata['t']
        q_id = qdata['q_id']
        m = qdata['m']
    db.update_q_ans(t, q_id, message.text)

    rmk = types.inline_keyboard.InlineKeyboardMarkup()
    b1 = types.inline_keyboard.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç—É–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è", callback_data=f'edit_q_{t}_{q_id}')
    b2 = types.inline_keyboard.InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å",
                                                    callback_data=f'edit_ans_{t}_{q_id}')
    b3 = types.inline_keyboard.InlineKeyboardButton(text="–í–∏–¥–∞–ª–∏—Ç–∏", callback_data=f'edit_del_{t}_{q_id}')
    rmk.row(b1, b2, b3)
    await m.edit_text(message.text, reply_markup=rmk)


@dp.message_handler(Text(startswith='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'), state=Form.math)
@dp.message_handler(Text(startswith='–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞'), state=None)
async def func(message: types.Message, state: FSMContext):
    await Form.math.set()
    await bot.send_message(message.chat.id, "1234")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
